[
  {
    "name": "filtering arrays",

    "mapping": "output = headers [name == \"From\"][0].value",

    "input": {
      "headers":[
        {
          "name":"From",
          "value":"\"Stack Exchange\" <do-not-reply@stackoverflow.com>"
        },
        {
          "name":"To",
          "value":"richard.caudle@datasift.com"
        },
        {
          "name":"From",
          "value":"\"Heap Overflow\" <do-not-reply@datasift.com>"
        }
      ]
    },

    "output": {"output": "\"Stack Exchange\" <do-not-reply@stackoverflow.com>"}
  },

  {
    "name": "nesting arrays inside arrays",

    "mapping": "@/com.datasift.ptolemy.ast/ArraysSuiteNestedArrays.ini",

    "input":     {
      "input_type": "vet data",
      "animales": [
        ["bob",   "dog"],
        ["terry", "cat"],
        ["steve", "chicken"]
      ]
    },

    "output": {
      "animals": [
        {
          "name"    : "bob",
          "species" : "dog",
          "type"    : "vet data"
        },
        {
          "name"    : "terry",
          "species" : "cat",
          "type"    : "vet data"
        },
        {
          "name"    : "steve",
          "species" : "chicken",
          "type"    : "vet data"
        }
      ]
    }
  },

  {
    "name": "nesting objects inside arrays",

    "mapping": "@/com.datasift.ptolemy.ast/ArraysSuiteNestedObjects.ini",

    "input":     {
      "input_type": "vet data",
      "animales": [
        {
          "nom": "bob",
          "espece": "dog"
        },
        {
          "nom": "terry",
          "espece": "cat"
        },
        {
          "nom": "steve",
          "espece": "chicken"
        }
      ]
    },

    "output":     {
      "animals": [
        {
          "name"    : "bob",
          "species" : "dog",
          "type"    : "vet data"
        },
        {
          "name"    : "terry",
          "species" : "cat",
          "type"    : "vet data"
        },
        {
          "name"    : "steve",
          "species" : "chicken",
          "type"    : "vet data"
        }
      ]
    }
  },
  {
    "name": "literal arrays being set",
    "mapping": "r = [1,2,3]",
    "input": {},
    "output": {"r": [1,2,3]}
  },
  {
    "name": "sparse arrays being set",
    "mapping": "r = [a,b,c]",
    "input": {"a": "hello", "c": "world"},
    "output": {"r": ["hello", "world"]}
  },
  {
    "name": "arrays being set with expressions in",
    "mapping": "r = [a,b,c]",
    "input": {"a": 1, "b": 2, "c": 3},
    "output": {"r": [1,2,3]}
  },
    {
    "name": "sorting arrays with a chained function",
    "mapping": "r = [1,3,2].sort()",
    "input": {},
    "output": {"r": [1,2,3]}
  },
    {
    "name": "arrays being used in expressions",
    "mapping": "r = if 2 > 1 then [1,2,3] else []",
    "input": {},
    "output": {"r": [1,2,3]}
  }
]